relDat$data <- "Relevant literature"
resDatL$data <- "Observed resilience"
papersDF <- rbind(relDat, resDatL)
# Change to factors
str(papersDF)
papersDF$Resilience <- as.factor(papersDF$Resilience)
papersDF$data <- as.factor(papersDF$data)
# Reorder data levels
papersDF$data <- factor(papersDF$data,
levels = c("Relevant literature", "Observed resilience"))
levels(papersDF$data)
# Reverse alphabetical
papersDF$Ecosystem <-
with(papersDF, factor(Ecosystem,
levels = levels(Ecosystem)[order(levels(Ecosystem),
decreasing = TRUE)]))
unique(papersDF$Ecosystem)
### Panel B
relevance_N <- relDat$N
resilience_N <- resDatL$N[1:6]
papersDF
###### Panel B #####
panelB <- ggplot(data = papersDF, aes(Ecosystem, Proportion,
fill = Resilience)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(stat = "identity", position = "stack", color = "black") +
scale_fill_manual(values = c("darkgray", "white", "black")) +
facet_grid(. ~ data) + coord_flip() +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
# theme(legend.position = "none") +
scale_y_continuous(limits = c(0,1)) +
scale_x_discrete("", labels = c("Algal forests" = "Algal forests\n(29/16)",
"Coral reefs" = "Coral reefs\n(22/17)",
"Mangroves" = "Mangroves\n(24/10)",
"Oyster reefs" = "Oyster reefs\n(12/1)",
"Salt marshes" = "Salt marshes\n(23/3)",
"Seagrasses" = "Seagrasses\n(21/8)")) +
labs(title = "B") + ULClabel +
theme(panel.margin = unit(2, "lines"))
###############################
source("./R/process_expert_papers.R")
# This is the frequency of all papers
litOrig %>% group_by(ecosystem) %>% summarise(freq = n())
# This is the frequency of relevant papers
litSub %>% group_by(ecosystem) %>% summarise(freq = n())
relevance_N <- relDat$N
resilience_N <- resDatL$N[1:6]
releveanceN
relevanceN
relevance_N
ecoList <- unique(dat$EcosystemType)
ecoList
ecoList
ecoList2 <- c("Seagrasses", "Algal forests", "Coral reefs",
"Oyster reefs", "Mangroves", "Salt marshes")
dat$ecosystemNew <- mapvalues(dat$EcosystemType, from = ecoList,
to = ecoList2)
dat %>% select(EcosystemType, ecosystemNew)
names(dat)
ecoList
ecoList
ecoList <- unique(dat$EcosystemType)
ecoList
ecoList2 <- c("Coral reefs", "Algal forests", "Mangroves",
"Oyster reefs", "Salt Marshes", "Seagrasses")
dat$ecosystemNew <- mapvalues(dat$EcosystemType, from = ecoList,
to = ecoList2)
dat %>% select(EcosystemType, ecosystemNew)
names(dat)
# select relevant columns and rename
dat2 <- dat %>% select(Paper, PaperType, ecosystemNew, EcosystemType,
ResilienceOutcome, ResilienceCat, ResilienceResponse,
DisturbType1, DisturbType2, DISTURBANCE.COMPILED,
MostImportantFactor1, MostImportFactor2,
FactorsPreventingResilience1, FactorsPreventingResilience2,
Dummy) %>%
rename(ecosystem = ecosystemNew)
dat2 <- droplevels(dat2)
# This is the frequency of all papers
dat2 %>% group_by(ecosystem) %>% summarise(freq = n())
# rename
litOrig <- dat2
###########################
###########################
### Need to get relevant papers
# Remove rows where the paper could not be found
unique(dat2$PaperType)
summary(dat2$PaperType)
dat2 <- dat2 %>% filter(PaperType != "can't find paper")
# Remove rows where the paper was not relevant to resilience
unique(dat2$PaperType)
dat3 <- dat2 %>% filter(PaperType != "Not Relevant")
# Remove rows where the paper was on restoration
summary(dat3$ResilienceCat)
dat4 <- dat3 %>% filter(ResilienceCat != "Restoration")
# Remove rows where paper had no ResilienceResponse group?
# (e.g., habitat forming species)
summary(dat4$ResilienceResponse)
dat4 %>% filter(ResilienceResponse == "" )
# this paper was in reference to non climatic disturbance so will
# be removed anyway
dat4 <- droplevels(dat4)
unique(dat4$PaperType)
unique(dat4$DisturbType1)
### Now include only habitat forming species AND whole community
unique(dat4$ResilienceResponse)
dat5 <- dat4 %>% filter(ResilienceResponse == "HabitatFormingSpp" |
ResilienceResponse == "WholeCommunity")
dat5 <- droplevels(dat5)
### Remove non climatic disturbances
unique(dat5$DISTURBANCE.COMPILED)
litSub_RE <- dat5 %>% filter(DISTURBANCE.COMPILED != "non climatic")
# alternative, using Jen's dummy column
litSub <- dat2 %>% filter(Dummy == "1")
#################################################
source("./R/process_expert_papers.R")
# This is the frequency of all papers
litOrig %>% group_by(ecosystem) %>% summarise(freq = n())
# This is the frequency of relevant papers
litSub %>% group_by(ecosystem) %>% summarise(freq = n())
litOrig %>% group_by(ecosystem) %>% summarise(freq = n())
# This is the frequency of relevant papers
litSub %>% group_by(ecosystem) %>% summarise(freq = n())
###### First step: what fraction of papers,
# gave relevant responses (i.e., climate-related) by ecosystem
# Create new table with Ecosystem, total sample size, and
# proportion of relevant papers
total <- litOrig %>% group_by(ecosystem) %>% summarise(freq = n())
yes <- litSub %>% group_by(ecosystem) %>% summarise(freq = n())
total$Resilience <- "Relevance"
total$propYes <- yes$freq/total$freq
total
total <- litOrig %>% group_by(ecosystem) %>% summarise(freq = n())
total
yes
yes <- litSub %>% group_by(ecosystem) %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem), .drop = FALSE)
yes
total$Resilience <- "Relevance"
total$propYes <- yes$freq/total$freq
total
names(total) <- c("Ecosystem", "N", "Resilience", "Proportion")
relDat <- total
###### Second step: Calculate proportion of observed resilience
# Create new table with Ecosystem, total sample size, and
# proportion of relevant papers
total <- litSub %>% group_by(ecosystem) %>% summarise(freq = n())
total <- litSub %>% group_by(ecosystem) %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem), .drop = FALSE)
relDat
no <- litSub %>% group_by(ResilienceOutcome) %>%
filter(ResilienceOutcome == "No") %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem),
.drop = FALSE)
yes <- litSub %>% group_by(ResilienceOutcome) %>%
filter(ResilienceOutcome == "Yes") %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem),
.drop = FALSE)
cd <- litSub %>% group_by(ResilienceOutcome) %>%
filter(ResilienceOutcome == "Context-Dependent") %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem),
.drop = FALSE)
total$propNo <- no$freq/total$freq
total$propYes <- yes$freq/total$freq
total$propCD <- cd$freq/total$freq
total$yesCD <- 1 - total$propNo
total
names(total) <- c("Ecosystem", "N", "No", "Yes", "Context", "YesCD")
total
resDat <- total
# make long
resDatL <- resDat %>%
tidyr::gather(key = Resilience, value = "Proportion", No:YesCD) %>%
filter(Resilience == "Yes" | Resilience == "Context")
resDatL
# Combine the two dataframes
relDat$data <- "Relevant literature"
resDatL$data <- "Observed resilience"
papersDF <- rbind(relDat, resDatL)
# Change to factors
str(papersDF)
papersDF$Resilience <- as.factor(papersDF$Resilience)
papersDF$data <- as.factor(papersDF$data)
# Reorder data levels
papersDF$data <- factor(papersDF$data,
levels = c("Relevant literature", "Observed resilience"))
levels(papersDF$data)
# Reverse alphabetical
papersDF$Ecosystem <-
with(papersDF, factor(Ecosystem,
levels = levels(Ecosystem)[order(levels(Ecosystem),
decreasing = TRUE)]))
unique(papersDF$Ecosystem)
### Panel B
relevance_N <- relDat$N
resilience_N <- resDatL$N[1:6]
papersDF
###### Panel B #####
panelB <- ggplot(data = papersDF, aes(Ecosystem, Proportion,
fill = Resilience)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(stat = "identity", position = "stack", color = "black") +
scale_fill_manual(values = c("darkgray", "white", "black")) +
facet_grid(. ~ data) + coord_flip() +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
# theme(legend.position = "none") +
scale_y_continuous(limits = c(0,1)) +
scale_x_discrete("", labels = c("Algal forests" = "Algal forests\n(29,16)",
"Coral reefs" = "Coral reefs\n(22,17)",
"Mangroves" = "Mangroves\n(23,9)",
"Oyster reefs" = "Oyster reefs\n(11,0)",
"Salt marshes" = "Salt marshes\n(23,2)",
"Seagrasses" = "Seagrasses\n(21,9)")) +
labs(title = "B") + ULClabel +
theme(panel.margin = unit(2, "lines"))
panelB
panelB <- ggplot(data = papersDF, aes(Ecosystem, Proportion,
fill = Resilience)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(stat = "identity", position = "stack", color = "black") +
scale_fill_manual(values = c("darkgray", "white", "black")) +
facet_grid(. ~ data) + coord_flip() +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(0,1)) +
scale_x_discrete("", labels = c("Algal forests" = "Algal forests\n(29,16)",
"Coral reefs" = "Coral reefs\n(22,17)",
"Mangroves" = "Mangroves\n(23,9)",
"Oyster reefs" = "Oyster reefs\n(11,0)",
"Salt marshes" = "Salt marshes\n(23,2)",
"Seagrasses" = "Seagrasses\n(21,9)")) +
labs(title = "B") + ULClabel +
theme(panel.margin = unit(2, "lines"))
panelB
papersDF
# load source data
source("./R/process_expert_papers.R")
# This is the frequency of all papers
litOrig %>% group_by(ecosystem) %>% summarise(freq = n())
# This is the frequency of relevant papers
litSub %>% group_by(ecosystem) %>% summarise(freq = n())
###### First step: what fraction of papers,
# gave relevant responses (i.e., climate-related) by ecosystem
# Create new table with Ecosystem, total sample size, and
# proportion of relevant papers
total <- litOrig %>% group_by(ecosystem) %>% summarise(freq = n())
total
yes <- litSub %>% group_by(ecosystem) %>% summarise(freq = n())
yes
# need to use ddply because I am missing oyster reefs otherwise
yes <- litSub %>% group_by(ecosystem) %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem), .drop = FALSE)
yes
total$Resilience <- "Relevance"
total$propYes <- yes$freq/total$freq
total
names(total) <- c("Ecosystem", "N", "Resilience", "Proportion")
relDat <- total
###### Second step: Calculate proportion of observed resilience
# Create new table with Ecosystem, total sample size, and
# proportion of relevant papers
total <- litSub %>% group_by(ecosystem) %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem), .drop = FALSE)
# use ddply because allows me to use .drop = FALSE (keeps all ecosystems)
no <- litSub %>% group_by(ResilienceOutcome) %>%
filter(ResilienceOutcome == "No") %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem),
.drop = FALSE)
yes <- litSub %>% group_by(ResilienceOutcome) %>%
filter(ResilienceOutcome == "Yes") %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem),
.drop = FALSE)
cd <- litSub %>% group_by(ResilienceOutcome) %>%
filter(ResilienceOutcome == "Context-Dependent") %>%
ddply(.(ecosystem), summarise, freq = length(ecosystem),
.drop = FALSE)
total$propNo <- no$freq/total$freq
total$propYes <- yes$freq/total$freq
total$propCD <- cd$freq/total$freq
total$yesCD <- 1 - total$propNo
total
names(total) <- c("Ecosystem", "N", "No", "Yes", "Context", "YesCD")
total
resDat <- total
# make long
resDatL <- resDat %>%
tidyr::gather(key = Resilience, value = "Proportion", No:YesCD) %>%
filter(Resilience == "Yes" | Resilience == "Context")
resDatL
# Combine the two dataframes
relDat$data <- "Relevant literature"
resDatL$data <- "Observed resilience"
papersDF <- rbind(relDat, resDatL)
# Change to factors
str(papersDF)
papersDF$Resilience <- as.factor(papersDF$Resilience)
papersDF$data <- as.factor(papersDF$data)
# Reorder data levels
papersDF$data <- factor(papersDF$data,
levels = c("Relevant literature", "Observed resilience"))
levels(papersDF$data)
# Reverse alphabetical
papersDF$Ecosystem <-
with(papersDF, factor(Ecosystem,
levels = levels(Ecosystem)[order(levels(Ecosystem),
decreasing = TRUE)]))
unique(papersDF$Ecosystem)
### Panel B
relevance_N <- relDat$N
resilience_N <- resDatL$N[1:6]
papersDF
###### Panel B #####
panelB <- ggplot(data = papersDF, aes(Ecosystem, Proportion,
fill = Resilience)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(stat = "identity", position = "stack", color = "black") +
scale_fill_manual(values = c("darkgray", "white", "black")) +
facet_grid(. ~ data) + coord_flip() +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.position = "none") +
scale_y_continuous(limits = c(0,1)) +
scale_x_discrete("", labels = c("Algal forests" = "Algal forests\n(29,16)",
"Coral reefs" = "Coral reefs\n(22,17)",
"Mangroves" = "Mangroves\n(23,9)",
"Oyster reefs" = "Oyster reefs\n(11,0)",
"Salt marshes" = "Salt marshes\n(23,2)",
"Seagrasses" = "Seagrasses\n(21,9)")) +
labs(title = "B") + ULClabel +
theme(panel.margin = unit(2, "lines"))
panelB
multiplot(panelA, panelB, cols = 1)
pdf("./figs/BS_Fig3.pdf", 7, 7)
multiplot(panelA, panelB, cols = 1)
dev.off()
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
library(plyr)
library(dplyr)
# library(reshape2)
library(ggplot2)
library(AICcmodavg)
source("./R/multiplotF.R")
source("./R/process_expert_survey.R")
names(dat)
# create new ecosystem column (with easier names)
ecoList <- unique(dat$Ecosystem)
ecoList
unique(dat$ecosystem)
datSub <- dat %>% filter(Dummy == 1)
names(datSub)
unique(datSub$Ecosystem)
unique(datSub$ecosystem)
head(datSub)
with(datSub, table(resNum, ecosystemNew))
with(datSub, table(resNum, ecosystem))
names(datSub)
dat$resNum <- with(dat, ifelse(Resilience == "Yes", 1, 0))
summary(dat$resNum)
with(dat, table(resNum))
datSub <- dat %>% filter(Dummy == 1)
with(datSub, table(resNum))
names(datSub)
unique(datSub$ecosystem)
#################################################
# USE GLM
#################################################
head(datSub)
with(datSub, table(resNum, ecosystem))
Cand.mod <- list()
Cand.mod[[1]] <- glm(resNum ~ Experience*ecosystemNew, data = datSub, family = binomial())
Cand.mod[[1]] <- glm(resNum ~ Experience*ecosystem, data = datSub, family = binomial())
names(datSub)
Cand.mod[[2]] <- glm(resNum ~ Experience + ecosystem, data = datSub, family = binomial())
Cand.mod[[3]] <- glm(resNum ~ Experience , data = datSub, family = binomial())
Cand.mod[[4]] <- glm(resNum ~ ecosystem , data = datSub, family = binomial())
Cand.mod[[5]] <- glm(resNum ~ 1 , data = datSub, family = binomial())
Cand.mod[[1]] <- glm(resNum ~ Experience * ecosystem, data = datSub, family = binomial())
summary(Cand.mod[[1]])
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Experience * Ecosystem", "Experience + Ecosystem", "Experience",
"Ecosystem", "Null model")
#generate AICc table with numbers
mod.aicctab <- aictab(cand.set= Cand.mod, modnames=mod_numbers, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(mod.aicctab, 'output/glm_results.csv')
summary(Cand.mod[[1]])
summary(glm1)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
# theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 2, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystem)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
# theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 2, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
plot1 + facet_wrap(~ ecosystem)
ggsave("./figs/BS_resVexperience.pdf", height = 3.5, width = 5)
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystem)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
# theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 2, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
ggsave("./figs/BS_resVexperience.pdf", height = 3.5, width = 5)
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
# load packages
library(plyr)
library(dplyr)
# library(reshape2)
library(ggplot2)
library(AICcmodavg)
# load source functions
#source("./R/summarizeData_150204.R")
source("./R/multiplotF.R")
################################
################################
# EXPERT EXAMPLES
################################
################################
# Ecosystem Resilience Survey = ERS
### ERS Question 5
###  In your research, have you encountered instances of notable RESILIENCE,
# either through strong resistance to or fast recovery from climatic disturbances?
# load source data
source("./R/process_expert_survey.R")
names(dat)
# create numeric response of resilience observed or not
dat$resNum <- with(dat, ifelse(Resilience == "Yes", 1, 0))
with(dat, table(resNum))
# filter to relevant responses using Jen's dummy column
datSub <- dat %>% filter(Dummy == 1)
with(datSub, table(resNum))
names(datSub)
unique(datSub$ecosystem)
#################################################
# USE GLM
#################################################
head(datSub)
names(datSub)
with(datSub, table(resNum, ecosystem))
# Set up candidate model list
Cand.mod <- list()
Cand.mod[[1]] <- glm(resNum ~ Experience * ecosystem, data = datSub, family = binomial())
summary(Cand.mod[[1]])
anova(Cand.mod[[1]])
summary(Cand.mod[[1]])
anova(Cand.mod[[1]])
print(mod.aicctab, digits=2, LL=TRUE)
Cand.mod <- list()
Cand.mod[[1]] <- glm(resNum ~ Experience * ecosystem, data = datSub, family = binomial())
summary(Cand.mod[[1]])
anova(Cand.mod[[1]])
Cand.mod[[2]] <- glm(resNum ~ Experience + ecosystem, data = datSub, family = binomial())
Cand.mod[[3]] <- glm(resNum ~ Experience , data = datSub, family = binomial())
Cand.mod[[4]] <- glm(resNum ~ ecosystem , data = datSub, family = binomial())
Cand.mod[[5]] <- glm(resNum ~ 1 , data = datSub, family = binomial())
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Experience * Ecosystem", "Experience + Ecosystem", "Experience",
"Ecosystem", "Null model")
#generate AICc table with numbers
mod.aicctab <- aictab(cand.set= Cand.mod, modnames=mod_numbers, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(mod.aicctab, 'output/glm_results.csv')
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text, sort = TRUE,
second.ord = FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
write.csv(mod.aicctab, 'output/glm_results.csv')
summary(Cand.mod[[3]])
anova(Cand.mod[[1]], Cand.mod[[3]])
anova(Cand.mod[[5]], Cand.mod[[3]])
summary(Cand.mod[[3]])
1 - pchisq(70.379, 69)
anova(Cand.mod[[5]], Cand.mod[[3]])
anova(Cand.mod[[1]])
anova(Cand.mod[[1]], test = "Chisq")
plot1 + facet_wrap(~ ecosystem)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystem)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
# theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 2, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
ggsave("./figs/BS_resVexperience.pdf", height = 3.5, width = 5)
# Can't test the interaction well because few "no's"
plot1 + facet_wrap(~ ecosystem)
anova(Cand.mod[[5]], Cand.mod[[3]])
