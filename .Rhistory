"Remaining biogenic habitat", "Remoteness",
"Species interactions", "Functional diversity",
"Genetic diversity", "Management")
factorList2
promDF2$factorNew <- mapvalues(promDF2$promoteFactor, from = factorList,
to = factorList2)
levels(promDF2$ResilienceResponse)
##### GENERALIZED SCRIPT TO GET PERCENTAGES #####
### Rename relevant dataframe
tbl1 <- promDF2
tbl2 <- ddply(tbl1, .(ecosystem, factorNew), summarise,
freq = length(ecosystem), .drop = FALSE) # frequency, I want %
tbl2
n <- with(tbl1, table(ecosystem))
str(n)
n <- as.data.frame(n)
n
tbl3 <- merge(tbl2, n)
tbl3$per <- with(tbl3, freq/Freq)
str(tbl3)
qplot(factorNew, per, data = tbl3, geom = "boxplot") + coord_flip()
##### CALCULATE MEANS AND ERROR #####
detach("package:dplyr", unload = TRUE)
papers <- summarySE(tbl3, measurevar = "prop", groupvars = "factorNew", na.rm = TRUE)
papers
### Load in this order
library(plyr)
source("./R/summarizeData.R")
library(dplyr)
source("./R/process_expert_papers.R")
library(reshape2)
library(ggplot2)
summary(dat2)
names(dat2)
levels(dat2$ecosystem)
##### GET RELEVANT ROWS AND COLUMNS #####
# select relevant columns and rename
ls2 <- litSub %>% select(ecosystem, ResilienceOutcome, ResilienceResponse,
MostImportantFactor1, MostImportFactor2,
DisturbType1, DisturbType2,
FactorsPreventingResilience1, FactorsPreventingResilience2) %>%
rename(promoteFactor1 = MostImportantFactor1,
promoteFactor2 = MostImportFactor2,
preventFactor1 = FactorsPreventingResilience1,
preventFactor2 = FactorsPreventingResilience2)
ls3 <- droplevels(ls2)
summary(ls3)
paperDF <- ls3
# Remove papers without evidence of resilience
paperDF2 <- paperDF %>% filter(ResilienceOutcome != "No")
################################
##### PROMOTING RESILIENCE #####
################################
##### CHECK FACTORS 1 AND 2 #####
# First need to change NAs to blanks ""
factor1 <- as.character(paperDF2$promoteFactor1)
factor2 <- as.character(paperDF2$promoteFactor2)
factor1[is.na(factor1)] <- ""
factor2[is.na(factor2)] <- ""
factor1 == "" & factor2 != "" # one mistake
suspect <- ifelse(factor1 == "" & factor2 != "", "bad", "good")
factor1new <- ifelse(suspect == "good", factor1, factor2)
factor2new <- ifelse(suspect != "good", "", factor2)
paperDF3 <- cbind(paperDF2, factor1new, factor2new)
##### COMBINE FACTORS 1 AND 2 #####
# Remove rows that are blank for promoteFactor1
paperDF3 <- paperDF3 %>% filter(factor1new != "")
names(paperDF3)
f1DF <- with(paperDF3, data.frame(ecosystem = ecosystem,
ResilienceResponse = ResilienceResponse,
DisturbType1 = DisturbType1,
promoteFactor = factor1new))
f2DF <- with(paperDF3, data.frame(ecosystem = ecosystem,
ResilienceResponse = ResilienceResponse,
DisturbType1 = DisturbType1,
promoteFactor = factor2new))
promDF <- rbind(f1DF, f2DF)
promDF2 <- promDF %>% filter(promoteFactor != "")
promDF2 <- droplevels(promDF2)
# create new factor column
factorList <- unique(promDF2$promoteFactor)
factorList
factorList2 <- c("Recruitment or connectivity", "Management",
"Other", "Physical setting",
"Remaining biogenic habitat", "Remoteness",
"Species interactions", "Functional diversity",
"Genetic diversity", "Management")
factorList2
promDF2$factorNew <- mapvalues(promDF2$promoteFactor, from = factorList,
to = factorList2)
levels(promDF2$ResilienceResponse)
##### GENERALIZED SCRIPT TO GET PERCENTAGES #####
### Rename relevant dataframe
tbl1 <- promDF2
tbl2 <- ddply(tbl1, .(ecosystem, factorNew), summarise,
freq = length(ecosystem), .drop = FALSE) # frequency, I want %
tbl2
n <- with(tbl1, table(ecosystem))
str(n)
n <- as.data.frame(n)
n
tbl3 <- merge(tbl2, n)
tbl3$per <- with(tbl3, freq/Freq)
str(tbl3)
qplot(factorNew, per, data = tbl3, geom = "boxplot") + coord_flip()
detach("package:dplyr", unload = TRUE)
papers <- summarySE(tbl3, measurevar = "prop", groupvars = "factorNew", na.rm = TRUE)
papers
warnings()
tbl3
tbl3$prop <- with(tbl3, freq/Freq)
str(tbl3)
qplot(factorNew, per, data = tbl3, geom = "boxplot") + coord_flip()
##### CALCULATE MEANS AND ERROR #####
detach("package:dplyr", unload = TRUE)
papers <- summarySE(tbl3, measurevar = "prop", groupvars = "factorNew", na.rm = TRUE)
papers
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
##### PANEL A: FACTORS PROMOTING RESILIENCE - EXPERT EXAMPLES #####
# load source data
source("./R/BS_resFactors_examples.R")
# ggplot settings
theme_set(theme_classic(base_size = 8))
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 0, size = rel(1.5)))
panelA <- ggplot(examples, aes(x = factor2, y = per)) +
xlab("Factors\npromoting resilience") +
ylab("Proportion") +
geom_errorbar(aes(ymin = per, ymax = per + ci),
width = 0, color = "black") +
coord_flip() + geom_bar(fill = "darkgray", color = "black", stat = "identity") +
labs(title = "A") + ULClabel +
scale_y_continuous(limits = c(0, 0.6)) +
geom_text(label = "Expert examples", x = 1, y = 0.42, size = 4)
panelA
detach("package:dplyr", unload = TRUE)
papers <- summarySE(tbl3, measurevar = "prop", groupvars = "factorNew", na.rm = TRUE)
papers
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 0, size = rel(1.5)))
# get the frequency values for plotting along the y-axis
totalN <- as.data.frame(with(promDF2, table(factorNew)))
totalN
totalN <- totalN[with(totalN, order(Freq, factorNew)), ]
# Reorder based on expert examples, above
# custom order of factors
newFactorOrder
papers$factor2 <- factor(papers$factorNew, levels = newFactorOrder)
papers
# Reorder based on max to min
panelC <- ggplot(papers, aes(x = factor2, y = prop)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_errorbar(aes(ymin = prop, ymax = prop + ci),
width = 0, color = "black") +
coord_flip() + geom_bar(fill = "darkgray", color = "black", stat = "identity") +
labs(title = "C") + ULClabel +
scale_y_continuous(limits = c(0, 0.45)) +
geom_text(label = "Literature examples", x = 1, y = 0.32, size = 4) +
theme(axis.text.y = element_blank())
panelC
source("./R/BS_resFactors_examples.R")
# ggplot settings
theme_set(theme_classic(base_size = 8))
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 0, size = rel(1.5)))
panelA <- ggplot(examples, aes(x = factor2, y = per)) +
xlab("Factors\npromoting resilience") +
ylab("Proportion") +
geom_errorbar(aes(ymin = per, ymax = per + ci),
width = 0, color = "black") +
coord_flip() + geom_bar(fill = "darkgray", color = "black", stat = "identity") +
labs(title = "A") + ULClabel +
scale_y_continuous(limits = c(0, 0.6)) +
geom_text(label = "Expert examples", x = 1, y = 0.42, size = 4)
panelA
##### LOAD PACKAGES, SOURCE DATA AND FUNCTIONS #####
### Load in this order
library(plyr)
source("./R/summarizeData.R")
library(dplyr)
source("./R/process_expert_papers.R")
library(reshape2)
library(ggplot2)
summary(dat2)
names(dat2)
levels(dat2$ecosystem)
##### GET RELEVANT ROWS AND COLUMNS #####
# select relevant columns and rename
ls2 <- litSub %>% select(ecosystem, ResilienceOutcome, ResilienceResponse,
MostImportantFactor1, MostImportFactor2,
DisturbType1, DisturbType2,
FactorsPreventingResilience1, FactorsPreventingResilience2) %>%
rename(promoteFactor1 = MostImportantFactor1,
promoteFactor2 = MostImportFactor2,
preventFactor1 = FactorsPreventingResilience1,
preventFactor2 = FactorsPreventingResilience2)
ls3 <- droplevels(ls2)
summary(ls3)
paperDF <- ls3
# Remove papers without evidence of resilience
paperDF2 <- paperDF %>% filter(ResilienceOutcome != "No")
################################
##### PROMOTING RESILIENCE #####
################################
##### CHECK FACTORS 1 AND 2 #####
# First need to change NAs to blanks ""
factor1 <- as.character(paperDF2$promoteFactor1)
factor2 <- as.character(paperDF2$promoteFactor2)
factor1[is.na(factor1)] <- ""
factor2[is.na(factor2)] <- ""
factor1 == "" & factor2 != "" # one mistake
suspect <- ifelse(factor1 == "" & factor2 != "", "bad", "good")
factor1new <- ifelse(suspect == "good", factor1, factor2)
factor2new <- ifelse(suspect != "good", "", factor2)
paperDF3 <- cbind(paperDF2, factor1new, factor2new)
##### COMBINE FACTORS 1 AND 2 #####
# Remove rows that are blank for promoteFactor1
paperDF3 <- paperDF3 %>% filter(factor1new != "")
names(paperDF3)
f1DF <- with(paperDF3, data.frame(ecosystem = ecosystem,
ResilienceResponse = ResilienceResponse,
DisturbType1 = DisturbType1,
promoteFactor = factor1new))
f2DF <- with(paperDF3, data.frame(ecosystem = ecosystem,
ResilienceResponse = ResilienceResponse,
DisturbType1 = DisturbType1,
promoteFactor = factor2new))
promDF <- rbind(f1DF, f2DF)
promDF2 <- promDF %>% filter(promoteFactor != "")
promDF2 <- droplevels(promDF2)
# create new factor column
factorList <- unique(promDF2$promoteFactor)
factorList
factorList2 <- c("Recruitment or connectivity", "Management",
"Other", "Physical setting",
"Remaining biogenic habitat", "Remoteness",
"Species interactions", "Functional diversity",
"Genetic diversity", "Management")
factorList2
promDF2$factorNew <- mapvalues(promDF2$promoteFactor, from = factorList,
to = factorList2)
levels(promDF2$ResilienceResponse)
##### GENERALIZED SCRIPT TO GET PERCENTAGES #####
### Rename relevant dataframe
tbl1 <- promDF2
tbl2 <- ddply(tbl1, .(ecosystem, factorNew), summarise,
freq = length(ecosystem), .drop = FALSE) # frequency, I want %
tbl2
n <- with(tbl1, table(ecosystem))
str(n)
n <- as.data.frame(n)
n
tbl3 <- merge(tbl2, n)
tbl3$prop <- with(tbl3, freq/Freq)
str(tbl3)
qplot(factorNew, per, data = tbl3, geom = "boxplot") + coord_flip()
##### CALCULATE MEANS AND ERROR #####
detach("package:dplyr", unload = TRUE)
papers <- summarySE(tbl3, measurevar = "prop", groupvars = "factorNew", na.rm = TRUE)
papers
newFactorOrder
papers$factor2 <- factor(papers$factorNew, levels = newFactorOrder)
papers
panelC <- ggplot(papers, aes(x = factor2, y = prop)) +
xlab("") + ylab("Proportion") +
geom_errorbar(aes(ymin = prop, ymax = prop + ci),
width = 0, color = "black") +
coord_flip() + geom_bar(fill = "darkgray", color = "black", stat = "identity") +
labs(title = "C") + ULClabel +
scale_y_continuous(limits = c(0, 0.45)) +
geom_text(label = "Literature examples", x = 1, y = 0.32, size = 4) +
theme(axis.text.y = element_blank())
panelC
head(paperDF2)
factor1 <- as.character(paperDF2$preventFactor1)
factor2 <- as.character(paperDF2$preventFactor2)
factor1[is.na(factor1)] <- ""
factor2[is.na(factor2)] <- ""
factor1 == "" & factor2 != "" # one mistake
suspect <- ifelse(factor1 == "" & factor2 != "", "bad", "good")
suspect
paperDF2 %>% filter(factor1new != "")
library(dplyr)
paperDF2 %>% filter(factor1new != "")
paperDF2 %>% filter(factor1new == "")
paperDF2 %>% filter(preventFactor1 == "")
f1DF <- with(paperDF2, data.frame(ecosystem = ecosystem,
ResilienceResponse = ResilienceResponse,
DisturbType1 = DisturbType1,
prevFactor = preventFactor1))
f2DF <- with(paperDF2, data.frame(ecosystem = ecosystem,
ResilienceResponse = ResilienceResponse,
DisturbType1 = DisturbType1,
prevFactor = preventFactor2))
prevDF <- rbind(f1DF, f2DF)
summary(prevDF)
prevDF2 <- prevDF %>% filter(prevFactor != "")
prevDF2 <- droplevels(prevDF2)
# create new factor column
factorList <- unique(prevDF2$prevFactor)
factorList
factorList2 <- c("Global stressors", "Local anthropogenic stressors",
"Local biotic stressors", "Lack of management",
"Multiple", "Other",
"Space preemption", "Lack of management")
factorList2
prevDF2$factorNew <- mapvalues(prevDF2$prevFactor, from = factorList, to = factorList2)
tbl1 <- prevDF2
tbl2 <- ddply(tbl1, .(ecosystem, factorNew), summarise,
freq = length(ecosystem), .drop = FALSE) # frequency, I want %
tbl2
n <- with(tbl1, table(ecosystem))
str(n)
n <- as.data.frame(n)
n
tbl3 <- merge(tbl2, n)
tbl3$prop <- with(tbl3, freq/Freq)
str(tbl3)
qplot(factorNew, prop, data = tbl3, geom = "boxplot") + coord_flip()
##### CALCULATE MEANS AND ERROR #####
detach("package:dplyr", unload = TRUE)
prevPapers <- summarySE(tbl3, measurevar = "prop", groupvars = "factorNew",
na.rm = TRUE)
prevPapers
prevFactorOrder <- rev(c("Local anthropogenic stressors", "Local biotic stressors",
"Space preemption", "Global stressors", "Lack of management",
"Multiple", "Other"))
prevPapers$factor <- factor(prevPapers$factorNew, levels = prevFactorOrder)
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 0, size = rel(1.5)))
panelE <- ggplot(prevPapers, aes(x = factor, y = prop)) +
theme_classic(base_size = 12) + xlab("") +
ylab("Proportion") + coord_flip() +
geom_errorbar(aes(ymin = prop, ymax = prop + ci),
width = 0, color = "black", position = position_dodge(0.8)) +
labs(title = "E") + ULClabel +
geom_text(label = "Literature examples", x = 2, y = 0.5, size = 4) +
geom_bar(stat = "identity",
fill = "darkgray", color = "black", width = 0.8) +
theme(axis.text.y = element_blank()) +
scale_y_continuous(limits = c(0, 0.85))
panelE
dat <- read.csv("./data/resOpinions.csv", header=TRUE, na.strings="NA")
# create new ecosystem column (with easier names)
ecoList <- unique(dat$ecosystem)
ecoList
str(ecoList)
levels(ecoList)
ecoList2 <- c("Algal forests", "Coral reefs", "Mangroves", "Oyster reefs",
"Salt marshes", "Seagrasses")
ecosystemNew <- mapvalues(dat$ecosystem, from = ecoList, to = ecoList2)
ecosystemNew
# create new factor column
factorList <- unique(dat$factor1)
factorList
factorList2 <- c("Recruitment or connectivity", "Species interactions",
"Physical setting", "Remaining biogenic habitat",
"Genetic diversity", "Functional diversity",
"Remoteness", "Management", "Other")
factorList2
factorNew <- mapvalues(dat$factor1, from = factorList, to = factorList2)
factorNew
dat3 <- cbind(ecosystemNew, factorNew, dat)
names(dat3)
# drop duplicate columns & unnecessary columns
drops <- c("ecosystem", "factor1")
dat4 <- dat3[, !(names(dat3) %in% drops)]
head(dat4)
colnames(dat4)[1:2] <- c("ecosystem", "factor1")
names(dat4)
resProp <- summarySE(dat4, measurevar = "resistProp", groupvars = "factor1")
recProp <- summarySE(dat4, measurevar = "recovProp", groupvars = "factor1")
colnames(resProp)[3] <- "proportion"
colnames(recProp)[3] <- "proportion"
names(resProp)
# combine dataframes
resilCat <- c(rep("resistance", 9), rep("recovery", 9))
resilCat
opinions <- rbind(resProp, recProp)
opinions$resilCat <- resilCat
opinions
# Reorder based on expert examples, above
# custom order of factors
opinions$factor2 <- factor(opinions$factor1, levels = newFactorOrder)
opinions
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 0, size = rel(1.5)))
panelB <- ggplot(opinions, aes(x = factor2, y = proportion, fill = resilCat)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
coord_flip() +
geom_errorbar(aes(ymin = proportion, ymax = proportion + ci),
width = 0, color = "black", position = position_dodge(0.8)) +
labs(title = "B") + ULClabel +
geom_text(label = "Expert opinions", x = 1, y = 0.8, size = 4) +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_bar(stat = "identity", position = position_dodge(0.8),
color = "black", width = 0.8) +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
theme(axis.text.y = element_blank())
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
##### PANEL A: FACTORS PROMOTING RESILIENCE - EXPERT EXAMPLES #####
# load source data
source("./R/BS_resFactors_examples.R")
# ggplot settings
theme_set(theme_classic(base_size = 8))
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 0, size = rel(1.5)))
panelA <- ggplot(examples, aes(x = factor2, y = per)) +
xlab("Factors\npromoting resilience") +
ylab("Proportion") +
geom_errorbar(aes(ymin = per, ymax = per + ci),
width = 0, color = "black") +
coord_flip() + geom_bar(fill = "darkgray", color = "black", stat = "identity") +
labs(title = "A") + ULClabel +
scale_y_continuous(limits = c(0, 0.6)) +
geom_text(label = "Expert examples", x = 1, y = 0.42, size = 4)
panelA
##### PANEL B: FACTORS PROMOTING RESILIENCE - EXPERT OPINIONS #####
# load source data
source("./R/BS_resFactors_opinions.R")
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 0, size = rel(1.5)))
panelB <- ggplot(opinions, aes(x = factor2, y = proportion, fill = resilCat)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
coord_flip() +
geom_errorbar(aes(ymin = proportion, ymax = proportion + ci),
width = 0, color = "black", position = position_dodge(0.8)) +
labs(title = "B") + ULClabel +
geom_text(label = "Expert opinions", x = 1, y = 0.8, size = 4) +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_bar(stat = "identity", position = position_dodge(0.8),
color = "black", width = 0.8) +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
theme(axis.text.y = element_blank())
##### PANEL C: FACTORS PROMOTING RESILIENCE - EXPERT LITERATURE #####
# load source data
source("./R/BS_resFactors_literature.R")
# Reorder based on max to min
panelC <- ggplot(papers, aes(x = factor2, y = prop)) +
xlab("") + ylab("Proportion") +
geom_errorbar(aes(ymin = prop, ymax = prop + ci),
width = 0, color = "black") +
coord_flip() + geom_bar(fill = "darkgray", color = "black", stat = "identity") +
labs(title = "C") + ULClabel +
scale_y_continuous(limits = c(0, 0.45)) +
geom_text(label = "Literature examples", x = 1, y = 0.32, size = 4) +
theme(axis.text.y = element_blank())
panelC
##### PANEL D: FACTORS PROMOTING RESILIENCE - EXPERT OPINIONS #####
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 0, size = rel(1.5)))
panelD <- ggplot(prevSummary2, aes(x = factor2, y = value,
fill = resilience)) +
theme_classic(base_size = 12) + xlab("Factors\npreventing resilience") +
ylab("Proportion") + coord_flip() +
geom_errorbar(aes(ymin = value, ymax = value + ci),
width = 0, color = "black", position = position_dodge(0.8)) +
labs(title = "D") + ULClabel +
geom_text(label = "Expert opinions", x = 0.8, y = 0.8, size = 4) +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_bar(stat = "identity", position = position_dodge(0.8),
color = "black", width = 0.8) +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE))  +
scale_x_discrete(labels = rev(c("Local anthropogenic\nstressors",
"Local biotic\nstressors", "Space\npreemption",
"Additional global\nstressors", "Lack of\nmanagement",
"Multiple", "Other"))) +
scale_y_continuous(limits = c(0, 1))
panelD
##### PANEL E: FACTORS PROMOTING RESILIENCE - EXPERT LITERATURE #####
ULClabel <- theme(plot.title = element_text(hjust = -0.07, vjust = 0, size = rel(1.5)))
panelE <- ggplot(prevPapers, aes(x = factor, y = prop)) +
theme_classic(base_size = 12) + xlab("") +
ylab("Proportion") + coord_flip() +
geom_errorbar(aes(ymin = prop, ymax = prop + ci),
width = 0, color = "black", position = position_dodge(0.8)) +
labs(title = "E") + ULClabel +
geom_text(label = "Literature examples", x = 2, y = 0.5, size = 4) +
geom_bar(stat = "identity",
fill = "darkgray", color = "black", width = 0.8) +
theme(axis.text.y = element_blank()) +
scale_y_continuous(limits = c(0, 0.85))
panelE
##### PANEL BLANK #####
panelBlank <- ggplot(examples, aes(x = factor2, y = per)) +
theme_minimal(base_size = 12) + xlab("") + ylab("") +
geom_blank() +
theme(axis.ticks = element_blank(), axis.text = element_blank()) +
theme(panel.grid = element_blank())
##### MULTI-PANEL PLOT #####
### save as pdf
pdf("./figs/BS_Fig4_temp.pdf", 14, 7)
multiplot(panelA, panelB, panelC, panelF, panelD, panelE,
layout = matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, byrow = TRUE))
dev.off()
source("./R/multiplotF.R")
multiplot(panelA, panelB, panelC, panelF, panelD, panelE,
layout = matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, byrow = TRUE))
panelB <- ggplot(opinions, aes(x = factor2, y = proportion, fill = resilCat)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
coord_flip() +
geom_errorbar(aes(ymin = proportion, ymax = proportion + ci),
width = 0, color = "black", position = position_dodge(0.8)) +
labs(title = "B") + ULClabel +
geom_text(label = "Expert opinions", x = 1, y = 0.8, size = 4) +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_bar(stat = "identity", position = position_dodge(0.8),
color = "black", width = 0.8) +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
theme(axis.text.y = element_blank())
source("./R/BS_resFactors_opinions.R")
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
