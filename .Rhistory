datSub$Resilience # all yes!
tbl2 <- ddply(datSub, .(ecosystem, Resilience), summarise,
freq = length(Resilience), .drop = FALSE) # frequency, I want %
obs <- aggregate(freq ~ ecosystem, data = tbl2, sum)
total <- with(tbl2, sum(freq))
yes <- tbl2[tbl2$Resilience == "Yes", ]
propYes <- yes$freq/(obs$freq)
tbl3 <- cbind(obs, yes$freq, propYes)
names(tbl3) <- c("Ecosystem", "N", "Yes", "Proportion")
examples <- tbl3
examples
View)(dat)
View(dat)
View(datSub)
library(plyr)
library(dplyr)
library(reshape2)
library(ggplot2)
source("./R/summarizeData_150204.R")
source("./R/multiplotF.R")
# load data
dat <- read.csv("./data/bsSurveyResults_140527_JO_Oct1.csv", header=TRUE,
na.strings="NA")
names(dat)
# create new ecosystem column (with easier names)
ecoList <- unique(dat$Ecosystem)
ecoList
str(ecoList)
levels(ecoList)
ecoList2 <- c("Algal forests", "Coral reefs", "Mangroves", "Oyster reefs",
"Salt marshes", "Seagrasses")
dat$ecosystem <- mapvalues(dat$Ecosystem, from = ecoList, to = ecoList2)
names(dat)
unique(dat$Disturbance_StrongReslience)
datSub <- dat %>% filter(Disturbance_StrongReslience != "exclude - no disturbance found" |
Disturbance_StrongReslience != "non-climatic" )
datSub <- dat %>% filter(Disturbance_StrongReslience != "exclude - no disturbance found" &
Disturbance_StrongReslience != "non-climatic" )
datSub <- droplevels(datSub)
unique(datSub$Disturbance_StrongReslience)
datSub <- dat %>% filter(Disturbance_StrongReslience != "exclude - no disturbance found" &
Disturbance_StrongReslience != "non-climatic" &
Disturbance_StrongReslience != "non climatic")
datSub <- droplevels(datSub)
unique(datSub$Disturbance_StrongReslience)
### ALL 97 RESPONDENTS
tbl2 <- ddply(dat, .(ecosystem, Resilience), summarise,
freq = length(Resilience), .drop = FALSE) # frequency, I want %
obs <- aggregate(freq ~ ecosystem, data = tbl2, sum)
total <- with(tbl2, sum(freq))
yes <- tbl2[tbl2$Resilience == "Yes", ]
propYes <- yes$freq/(obs$freq)
tbl3 <- cbind(obs, yes$freq, propYes)
names(tbl3) <- c("Ecosystem", "N", "Yes", "Proportion")
examples <- tbl3
# Reverse alphabetical
examples$Ecosystem <- with(examples, factor(Ecosystem,
levels = levels(Ecosystem)[order(levels(Ecosystem), decreasing = TRUE)]))
unique(examples$Ecosystem)
# Rename to full
fullDF <- examples
fullDF
### Subset data to climate disturbances only
datSub$Resilience # all yes!
tbl2 <- ddply(datSub, .(ecosystem, Resilience), summarise,
freq = length(Resilience), .drop = FALSE) # frequency, I want %
obs <- aggregate(freq ~ ecosystem, data = tbl2, sum)
total <- with(tbl2, sum(freq))
yes <- tbl2[tbl2$Resilience == "Yes", ]
propYes <- yes$freq/(obs$freq)
tbl3 <- cbind(obs, yes$freq, propYes)
names(tbl3) <- c("Ecosystem", "N", "Yes", "Proportion")
examples <- tbl3
# Reverse alphabetical
examples$Ecosystem <- with(examples, factor(Ecosystem,
levels = levels(Ecosystem)[order(levels(Ecosystem), decreasing = TRUE)]))
unique(examples$Ecosystem)
# rename
subDF <- examples
### Combine df's
fullDF$data <- "full"
subDF$data <- "subset"
examplesDF <- rbind(fullDF, subDF)
### Panel A; use ggplot2
ULClabel <- theme(plot.title = element_text(hjust = -0.15,
vjust = 0, size = rel(1.5)))
subDFn <- examplesDF[examplesDF$data == "subset", ]$N
fullDFn <- examplesDF[examplesDF$data == "full", ]$N
panelA <- ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "A") + ULClabel +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = examplesDF[examplesDF$data == "subset", ],
label = rev(subDFn), size = 2.8) +
geom_text(aes(x = 1.25:6.25, y = 0.05), data = examplesDF[examplesDF$data == "full", ],
label = rev(fullDFn), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3) 	+
theme(legend.position = "none")
multiplot(panelA, panelB, cols = 2)
panelA
panelA <- ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "A") + ULClabel +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = examplesDF[examplesDF$data == "subset", ],
label = rev(subDFn), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelA
panelA <- ggplot(examplesDF[examplesDF$data == "subset", ], aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "A") + ULClabel +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = examplesDF[examplesDF$data == "subset", ],
label = rev(subDFn), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelA
multiplot(panelA, panelB, cols = 2)
panelA <- ggplot(examplesDF[examplesDF$data == "subset", ], aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "A") + ULClabel +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = examplesDF[examplesDF$data == "subset", ],
label = rev(subDFn), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelA
panelA <- ggplot(examplesDF[examplesDF$data == "subset", ],
aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "A") + ULClabel +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = examplesDF[examplesDF$data == "subset", ],
label = rev(subDFn), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelA
panelA <- ggplot(examplesDF[examplesDF$data == "subset", ],
aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "A") + ULClabel +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = examplesDF[examplesDF$data == "subset", ],
label = rev(subDFn), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelA
panelA <- ggplot(examplesDF[examplesDF$data == "subset", ],
aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "A") + ULClabel +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = examplesDF[examplesDF$data == "subset", ],
label = rev(subDFn), size = 4) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelA
panelA <- ggplot(examplesDF[examplesDF$data == "subset", ],
aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "A") + ULClabel +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = examplesDF[examplesDF$data == "subset", ],
label = rev(subDFn), size = 3) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelA
dat <- read.csv("./data/PapersList2_NL_150526_JO_Oct1.csv", header=TRUE, na.strings="NA")
dat <- read.csv("./data/PapersList2_NL_150526_JO_Oct1.csv", header=TRUE, na.strings="NA")
dim(dat)
names(dat)
# O'Leary et al. 2015
# Bright spots of hope: resilience of nearshore
# marine ecosystems to climatic impacts
# Supplemental Figure
# Observation of resilience ~ years of experience
# Author: Robin Elahi
# Date: 151001
#################################################
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
# load packages
library(plyr)
library(dplyr)
library(reshape2)
library(ggplot2)
# load source functions
source("./R/summarizeData_150204.R")
source("./R/multiplotF.R")
################################
################################
# EXPERT EXAMPLES
################################
################################
# Ecosystem Resilience Survey = ERS
### ERS Question 5
###  In your research, have you encountered instances of notable RESILIENCE,
# either through strong resistance to or fast recovery from climatic disturbances?
# load source data
source("./R/process_expert_survey.R")
names(dat)
# Filtering steps
# 97 respondents to start
# now filter to relevant climate criteria
unique(dat$Disturbance_StrongReslience)
# Exclude: "exclude - no disturbance found" and "non-climatic"
datSub <- dat %>% filter(Disturbance_StrongReslience != "exclude - no disturbance found" &
Disturbance_StrongReslience != "non-climatic" &
Disturbance_StrongReslience != "non climatic")
datSub <- droplevels(datSub)
unique(datSub$Disturbance_StrongReslience)
dat$resNum <- ifelse(dat$Resilience == "Yes", 1, 0)
glm1 <- glm(resNum ~ Experience*ecosystemNew, data = dat, family = binomial())
glm2 <- glm(resNum ~ Experience + ecosystemNew, data = dat, family = binomial())
glm3 <- glm(resNum ~ Experience , data = dat, family = binomial())
glm4 <- glm(resNum ~ 1 , data = dat, family = binomial())
datSub$resNum <- ifelse(datSub$Resilience == "Yes", 1, 0)
glm1 <- glm(resNum ~ Experience*ecosystemNew, data = datSub, family = binomial())
names(datSub)
unique(datSub$Ecosystem)
ecoList <- unique(dat$Ecosystem)
ecoList
str(ecoList)
levels(ecoList)
ecoList2 <- c("Algal forests", "Coral reefs", "Mangroves", "Oyster reefs", "Salt marshes", "Seagrasses")
dat$ecosystemNew <- mapvalues(dat$Ecosystem, from = ecoList, to = ecoList2)
glm1 <- glm(resNum ~ Experience*ecosystemNew, data = datSub, family = binomial())
source("./R/process_expert_survey.R")
names(dat)
# create new ecosystem column (with easier names)
ecoList <- unique(dat$Ecosystem)
ecoList
str(ecoList)
levels(ecoList)
ecoList2 <- c("Algal forests", "Coral reefs", "Mangroves", "Oyster reefs", "Salt marshes", "Seagrasses")
dat$ecosystemNew <- mapvalues(dat$Ecosystem, from = ecoList, to = ecoList2)
unique(dat$Disturbance_StrongReslience)
# Exclude: "exclude - no disturbance found" and "non-climatic"
datSub <- dat %>% filter(Disturbance_StrongReslience != "exclude - no disturbance found" &
Disturbance_StrongReslience != "non-climatic" &
Disturbance_StrongReslience != "non climatic")
datSub <- droplevels(datSub)
unique(datSub$Disturbance_StrongReslience)
datSub$resNum <- ifelse(datSub$Resilience == "Yes", 1, 0)
names(datSub)
unique(datSub$Ecosystem)
glm1 <- glm(resNum ~ Experience*ecosystemNew, data = datSub, family = binomial())
glm2 <- glm(resNum ~ Experience + ecosystemNew, data = datSub, family = binomial())
glm3 <- glm(resNum ~ Experience , data = datSub, family = binomial())
glm4 <- glm(resNum ~ 1 , data = datSub, family = binomial())
AIC(glm1, glm2, glm3, glm4)
head(datSub)
anova(glm1)
summary(glm4)
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 24) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.2)) +
theme(legend.title = element_blank()) +
geom_point(size = 5, alpha = 0.8, position = position_jitter(h = 0.05))
plot1 + layer(stat = "smooth", stat_params = list(method = "glm", family = "binomial"), mapping = aes(shape = NULL))
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial", color = "black", size = 1.5)
with(datSub, table(Experience, ecosystemNew))
with(datSub, table(resNum, ecosystemNew))
glm1 <- glm(resNum ~ Experience*ecosystemNew, data = datSub, family = binomial())
summary(glm1)
anova(glm1)
AIC(glm1, glm2, glm3, glm4)
anova(glm3, glm4)
plot(glm3)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 24) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.2)) +
theme(legend.title = element_blank()) +
geom_point(size = 5, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 24) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_point(size = 5, alpha = 0.8, position = position_jitter(h = 0.05))
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 24) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_point(size = 5, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + layer(stat = "smooth", stat_params = list(method = "glm", family = "binomial"),
mapping = aes(shape = NULL))
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1.5)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_point(size = 5, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1.5)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_point(size = 2, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1.5)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_point(size = 3, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
anova(glm1)
glm1 <- glm(resNum ~ Experience*ecosystemNew, data = datSub, family = binomial())
glm2 <- glm(resNum ~ Experience + ecosystemNew, data = datSub, family = binomial())
glm3 <- glm(resNum ~ Experience , data = datSub, family = binomial())
glm4 <- glm(resNum ~ 1 , data = datSub, family = binomial())
AIC(glm1, glm2, glm3, glm4)
anova(glm1, test = "chisq")
anova(glm1, test = "Chisq")
?glm
anova(glm1, test = "F")
anova(glm1, test = "Rao")
anova(glm1, test = "LRT")
anova(glm1, test = "Cp")
anova(glm1, test = "LRT")
summary(glm1)
AIC(glm1, glm2, glm3, glm4)
with(datSub, table(resNum, ecosystemNew))
AIC(glm1, glm2, glm3, glm4)
summary(glm1)
anova(glm1, test = "Chisq")
plot1
plot1 + facet_wrap(~ ecosystemNew)
library(AICcmodavg)
Cand.mod <- list()
Cand.mod <- list()
Cand.mod[[1]] <- glm(resNum ~ Experience*ecosystemNew, data = datSub, family = binomial())
Cand.mod[[2]] <- glm(resNum ~ Experience + ecosystemNew, data = datSub, family = binomial())
Cand.mod[[3]] <- glm(resNum ~ Experience , data = datSub, family = binomial())
Cand.mod[[4]] <- glm(resNum ~ 1 , data = datSub, family = binomial())
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
Cand.mod <- list()
Cand.mod[[1]] <- glm(resNum ~ Experience*ecosystemNew, data = datSub, family = binomial())
Cand.mod[[2]] <- glm(resNum ~ Experience + ecosystemNew, data = datSub, family = binomial())
Cand.mod[[3]] <- glm(resNum ~ Experience , data = datSub, family = binomial())
Cand.mod[[4]] <- glm(resNum ~ 1 , data = datSub, family = binomial())
Cand.mod <- list()
Cand.mod[[1]] <- glm(resNum ~ Experience*ecosystemNew, data = datSub, family = binomial())
Cand.mod[[2]] <- glm(resNum ~ Experience + ecosystemNew, data = datSub, family = binomial())
Cand.mod[[3]] <- glm(resNum ~ Experience , data = datSub, family = binomial())
Cand.mod[[4]] <- glm(resNum ~ ecosystemNew , data = datSub, family = binomial())
Cand.mod[[5]] <- glm(resNum ~ 1 , data = datSub, family = binomial())
#create a vector of names to trace back models in set
mod_numbers <- paste("Cand.mod", 1:length(Cand.mod), sep=" ")
mod_text <- c("Experience * Ecosystem", "Experience + Ecosystem", "Experience",
"Ecosystem", "Null model")
#generate AICc table with numbers
mod.aicctab <- aictab(cand.set= Cand.mod, modnames=mod_numbers, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
#generate AICc table with names
mod.aicctab <- aictab(cand.set= Cand.mod, modnames= mod_text, sort=TRUE,
second.ord=FALSE) # second.ord =TRUE means AICc is used (not AIC)
print(mod.aicctab, digits=2, LL=TRUE)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.1)) +
theme(legend.title = element_blank()) +
geom_point(size = 3, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(0.5, 0.1)) +
theme(legend.title = element_blank()) +
geom_point(size = 3, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 3, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
ggsave("resVexperience.pdf", height = 3.5, width = 3.5)
ggsave("./figs/resVexperience.pdf", height = 3.5, width = 3.5)
ggsave("./figs/BS_resVexperience.pdf", height = 3.5, width = 3.5)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 1, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
ggsave("./figs/BS_resVexperience.pdf", height = 3.5, width = 3.5)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 21, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
ggsave("./figs/BS_resVexperience.pdf", height = 3.5, width = 3.5)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 2, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
ggsave("./figs/BS_resVexperience.pdf", height = 3.5, width = 3.5)
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
theme(legend.title = element_blank()) +
geom_point(size = 2, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
# theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 2, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
ggsave("./figs/BS_resVexperience.pdf", height = 3.5, width = 3.5)
# plot results
plot1 <- ggplot(datSub, aes(Experience, resNum, shape = ecosystemNew)) +
theme_classic(base_size = 12) + xlab("Experience (years)") +
ylab("Have you observed resilience?\n (proportion)") +
# theme(legend.justification = c(1,0), legend.position = c(1, 0.01)) +
theme(legend.title = element_blank()) +
geom_point(size = 2, alpha = 0.8, position = position_jitter(h = 0.05))
plot1
plot1 + stat_smooth(mapping = aes(shape = NULL), method = "glm", family = "binomial",
color = "black", size = 1)
ggsave("./figs/BS_resVexperience.pdf", height = 3.5, width = 5)
write.csv(mod.aicctab, 'glm_results.csv')
write.csv(mod.aicctab, 'output/glm_results.csv')
