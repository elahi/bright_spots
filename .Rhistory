names(total) <- c("Ecosystem", "N", "Proportion")
head(dat)
# get relevant columns
dat2 <- dat %>% select(Ecosystem, ecosystem, Experience, Resilience, Disturbance_StrongReslience)
library(dplyr)
library(ggplot2)
# load source functions
# source("./R/summarizeData_150204.R")
source("./R/multiplotF.R")
################################
################################
# EXPERT EXAMPLES
################################
################################
# Ecosystem Resilience Survey = ERS
### ERS Question 5
###  In your research, have you encountered instances of notable RESILIENCE,
# either through strong resistance to or fast recovery from climatic disturbances?
# load source data
source("./R/process_expert_survey.R")
# Filtering steps
# 97 respondents to start
################################
# First step: what fraction of respondents, gave relevant responses (i.e., climate-related)
# by ecosystem
head(dat)
# get relevant columns
dat2 <- dat %>% select(Ecosystem, ecosystem, Experience, Resilience, Disturbance_StrongReslience)
# make new column
unique(dat2$Disturbance_StrongReslience)
dat2$relevance <- with(dat2,
ifelse(Disturbance_StrongReslience != "exclude - no disturbance found" &
Disturbance_StrongReslience != "non climatic",
"yes", "no"))
head(dat2)
total <- dat2 %>% group_by(ecosystem) %>% summarise(freq = n())
yes <- dat2 %>% group_by(ecosystem, relevance) %>% summarise(freq = n()) %>%
filter(relevance == "yes")
total$propYes <- yes$freq/total$freq
total
names(total) <- c("Ecosystem", "N", "Proportion")
relevanceDat <- total
relevanceDat
unique(dat$Disturbance_StrongReslience)
datSub <- dat %>% filter(Disturbance_StrongReslience != "exclude - no disturbance found" &
Disturbance_StrongReslience != "non climatic")
datSub <- droplevels(datSub)
unique(datSub$Disturbance_StrongReslience)
unique(datSub$Resilience)
# Create new table with Ecosystem, total sample size, and proportion of relevant responses
total <- datSub %>% group_by(ecosystem) %>% summarise(freq = n())
yes <- datSub %>% group_by(ecosystem, Resilience) %>% summarise(freq = n()) %>%
filter(Resilience == "Yes")
total
yes
total$propYes <- yes$freq/total$freq
total
names(total) <- c("Ecosystem", "N", "Proportion")
resilienceDat <- total
# Combine the two dataframes
relevanceDat
resilienceDat
relevanceDat$data <- "relevance"
resilienceDat$data <- "resilience"
examplesDF <- rbind(relevanceDat, resilienceDat)
examplesDF
# Reverse alphabetical
examplesDF$Ecosystem <- with(examplesDF,
factor(Ecosystem, levels = levels(Ecosystem)[order(levels(Ecosystem),
decreasing = TRUE)]))
unique(examplesDF$Ecosystem)
examplesDF
examplesDF$Ecosystem <- with(examplesDF,
factor(Ecosystem, levels = levels(Ecosystem)[order(levels(Ecosystem),
decreasing = TRUE)]))
str(examplesDF)
examplesDF$Ecosystem <- as.factor(examplesDF$Ecosystem)
examplesDF$Ecosystem <- with(examplesDF, factor(Ecosystem, levels = levels(Ecosystem)[order(levels(Ecosystem),
decreasing = TRUE)]))
unique(examplesDF$Ecosystem)
str(examplesDF)
# Change to factors
str(examplesDF)
examplesDF$Ecosystem <- as.factor(examplesDF$Ecosystem)
examplesDF$data <- as.factor(examplesDF$data)
# Reverse alphabetical
examplesDF$Ecosystem <- with(examplesDF, factor(Ecosystem, levels = levels(Ecosystem)[order(levels(Ecosystem),
decreasing = TRUE)]))
unique(examplesDF$Ecosystem)
### Panel A; use ggplot2
ULClabel <- theme(plot.title = element_text(hjust = -0.2,
vjust = 0, size = rel(1.5)))
relevance_N <- relevanceDat$N
resilience_N <- resilienceDat$N
examplesDF
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip()
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8)
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip()
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = data)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip()
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip()
examplesDF
panelA <- ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = relevanceDat,
label = rev(relevance_N), size = 2.8) +
geom_text(aes(x = 1.25:6.25, y = 0.05), data = resilienceDat,
label = rev(resilience_N), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelA
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = relevanceDat,
label = rev(relevance_N), size = 2.8) +
geom_text(aes(x = 1.25:6.25, y = 0.05), data = resilienceDat,
label = rev(resilience_N), size = 2.8) +
labs(title = "A") + ULClabel
examplesDF
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = FALSE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = relevanceDat,
label = rev(relevance_N), size = 2.8) +
geom_text(aes(x = 1.25:6.25, y = 0.05), data = resilienceDat,
label = rev(resilience_N), size = 2.8) +
labs(title = "A") + ULClabel
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = data)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = FALSE))
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white"))
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE))
gplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = resilienceDat,
label = rev(resilience_N), size = 2.8) +
geom_text(aes(x = 1.25:6.25, y = 0.05), data = relevanceDat,
label = rev(relevance_N), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3)
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = resilienceDat,
label = rev(resilience_N), size = 2.8) +
geom_text(aes(x = 1.25:6.25, y = 0.05), data = relevanceDat,
label = rev(relevance_N), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1.25, y = 0.8, size = 3)
ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = resilienceDat,
label = rev(resilience_N), size = 2.8) +
geom_text(aes(x = 1.25:6.25, y = 0.05), data = relevanceDat,
label = rev(relevance_N), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 0.8, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelA <- ggplot(examplesDF, aes(x = Ecosystem, y = Proportion, fill = rev(data))) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(color = "black", stat = "identity",
position = position_dodge(0.8), width = 0.8) +
coord_flip() +
scale_fill_manual(values = c("darkgray", "white")) +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 0.8:5.8, y = 0.05), data = resilienceDat,
label = rev(resilience_N), size = 2.8) +
geom_text(aes(x = 1.25:6.25, y = 0.05), data = relevanceDat,
label = rev(relevance_N), size = 2.8) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 0.8, y = 0.9, size = 3) 	+
theme(legend.position = "none")
panelA
examplesDF
dat <- read.csv("./data/PapersList2_NL_150526_JO_Oct1.csv", header=TRUE, na.strings="NA")
dim(dat)
names(dat)
# Remove rows where the paper could not be found
dat2 <- dat %>% filter(PaperType == "Empirical" | PaperType == "Review" |
PaperType == "NotRelevant" |PaperType == "Modelling")
dim(dat2)
unique(dat$PaperType)
dat2 <- dat %>% filter(PaperType == "can't find paper")
dat3 <- dat2 %>% filter(PaperType != "NotRelevant (restoration" )
dim(dat3) # 99 rows, keeping restoration
dat3 <- dat2 %>% filter(PaperType != "NotRelevant (restoration" |
PaperType != "NotRelevant")
dim(dat3) # 99 rows, keeping restoration
dat3 <- dat2 %>% filter(PaperType != "NotRelevant (restoration)" |
PaperType != "NotRelevant")
dim(dat3) # 99 rows, keeping restoration
unique(dat$PaperType)
dat2 <- dat %>% filter(PaperType != "can't find paper")
# Remove rows where the paper was not relevant to resilience
dat3 <- dat2 %>% filter(PaperType != "NotRelevant (restoration)" |
PaperType != "NotRelevant")
dim(dat3) # 99 rows, keeping restoration
unique(dat$PaperType)
unique(dat2$PaperType)
dat3 <- dat2 %>% filter(PaperType != "NotRelevant")
summary(dat3$ResilienceResponse)
dat3 %>% filter(ResilienceResponse == "" ) # this paper does not appear relevant
dat4 <- dat3 %>% filter(ResilienceResponse != "" )
dat %>% group_by(EcosystemType) %>% summarise(freq = n())
dat4 <- droplevels(dat4)
unique(dat4$PaperType)
unique(dat4$DisturbType1)
litSub <- dat4
litFull <- dat
# create new ecosystem column (with easier names)
ecoList <- unique(dat$EcosystemType)
ecoList
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
# load packages
# library(reshape2)
library(plyr)
library(dplyr)
library(ggplot2)
# load source functions
# source("./R/summarizeData_150204.R")
source("./R/multiplotF.R")
################################
dat <- read.csv("./data/PapersList2_NL_150526_JO_Oct1.csv", header=TRUE, na.strings="NA")
dim(dat)
names(dat)
### This is the frequency of all papers
dat %>% group_by(EcosystemType) %>% summarise(freq = n())
### Need to get relevant papers
# Remove rows where the paper could not be found
unique(dat$PaperType)
dat2 <- dat %>% filter(PaperType != "can't find paper")
# Remove rows where the paper was not relevant to resilience
unique(dat2$PaperType)
dat3 <- dat2 %>% filter(PaperType != "NotRelevant")
dim(dat3) # 90 rows, keeping restoration
# Remove rows where paper had no ResilienceResponse group (e.g., habitat forming species)
summary(dat3$ResilienceResponse)
dat3 %>% filter(ResilienceResponse == "" ) # this paper does not appear relevant
dat4 <- dat3 %>% filter(ResilienceResponse != "" )
dat4 <- droplevels(dat4)
unique(dat4$PaperType)
unique(dat4$DisturbType1)
#################################################
# rename
litSub <- dat4
litFull <- dat
ecoList <- unique(dat$EcosystemType)
ecoList
str(ecoList)
levels(ecoList)
ecoList2 <- c("Algal forests", "Coral reefs", "Mangroves", "Oyster reefs",
"Salt marshes", "Seagrasses")
ecosystemNew <- mapvalues(dat$EcosystemType, from = ecoList, to = ecoList2)
ecosystemNew
dat2 <- cbind(ecosystemNew, dat)
names(dat2)
# select relevant columns and rename
dat3 <- dat2 %>% select(ecosystemNew, ResilienceOutcome, ResilienceResponse,
DisturbType1, DisturbType2) %>%
rename(ecosystem = ecosystemNew)
dat3 <- droplevels(dat3)
dim(dat3)
unique(dat3$ResilienceResponse)
unique(dat3$ResilienceOutcome)
unique(dat3$DisturbType1)
summary(dat3)
litSub <- dat4
litOrig <- dat
# create new ecosystem column (with easier names)
dat <- read.csv("./data/PapersList2_NL_150526_JO_Oct1.csv", header=TRUE, na.strings="NA")
dim(dat)
names(dat)
### This is the frequency of all papers
dat %>% group_by(EcosystemType) %>% summarise(freq = n())
### Need to get relevant papers
# Remove rows where the paper could not be found
unique(dat$PaperType)
dat2 <- dat %>% filter(PaperType != "can't find paper")
# Remove rows where the paper was not relevant to resilience
unique(dat2$PaperType)
dat3 <- dat2 %>% filter(PaperType != "NotRelevant")
dim(dat3) # 90 rows, keeping restoration
# Remove rows where paper had no ResilienceResponse group (e.g., habitat forming species)
summary(dat3$ResilienceResponse)
dat3 %>% filter(ResilienceResponse == "" ) # this paper does not appear relevant
dat4 <- dat3 %>% filter(ResilienceResponse != "" )
dat4 <- droplevels(dat4)
unique(dat4$PaperType)
unique(dat4$DisturbType1)
#################################################
# rename
litSub <- dat4
litOrig <- dat
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
dat <- read.csv("./data/PapersList2_NL_150526_JO_Oct1.csv", header=TRUE, na.strings="NA")
# create new ecosystem column (with easier names)
ecoList <- unique(dat$EcosystemType)
ecoList
str(ecoList)
levels(ecoList)
ecoList2 <- c("Algal forests", "Coral reefs", "Mangroves", "Oyster reefs",
"Salt marshes", "Seagrasses")
ecosystemNew <- mapvalues(dat$EcosystemType, from = ecoList, to = ecoList2)
ecosystemNew
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
dat <- read.csv("./data/PapersList2_NL_150526_JO_Oct1.csv", header=TRUE, na.strings="NA")
# create new ecosystem column (with easier names)
ecoList <- unique(dat$EcosystemType)
ecoList
str(ecoList)
levels(ecoList)
ecoList2 <- c("Algal forests", "Coral reefs", "Mangroves", "Oyster reefs",
"Salt marshes", "Seagrasses")
dat$ecosystemNew <- mapvalues(dat$EcosystemType, from = ecoList, to = ecoList2)
dat %>% select(ecosystemNew, ResilienceOutcome, ResilienceResponse,
DisturbType1, DisturbType2, PaperType) %>%
rename(ecosystem = ecosystemNew)
# select relevant columns and rename
dat2 <- dat %>% select(ecosystemNew, ResilienceOutcome, ResilienceResponse,
DisturbType1, DisturbType2, PaperType) %>%
rename(ecosystem = ecosystemNew)
dat2 <- droplevels(dat2)
dat2 %>% group_by(ecosystem) %>% summarise(freq = n())
unique(dat2$PaperType)
dat2 <- dat2 %>% filter(PaperType != "can't find paper")
# Remove rows where the paper was not relevant to resilience
unique(dat2$PaperType)
dat3 <- dat2 %>% filter(PaperType != "NotRelevant")
dim(dat3) # 90 rows, keeping restoration
# Remove rows where paper had no ResilienceResponse group (e.g., habitat forming species)
summary(dat3$ResilienceResponse)
dat3 %>% filter(ResilienceResponse == "" ) # this paper does not appear relevant
dat4 <- dat3 %>% filter(ResilienceResponse != "" )
dat4 <- droplevels(dat4)
unique(dat4$PaperType)
unique(dat4$DisturbType1)
litOrig <- dat2
litFull <- dat4
unique(litFull$ResilienceResponse)
unique(litFull$ResilienceResponse)
litSub <- litFull %>% filter(ResilienceResponse == "HabitatFormingSpp" |
ResilienceResponse == "WholeCommunity")
litSub <- droplevels(litSub)
unique(litSub$DisturbType1)
unique(litSub$ResilienceOutcome)
unique(litSub$DisturbType2)
unique(litSub$ResilienceOutcome)
View(litSub)
unique(litSub$DisturbType1)
View(litSub)
unique(litSub$DisturbType1)
# keep only climatic disturbances
litSub1 <- droplevels(lit[lit$DisturbType1 == "Storms" |
lit$DisturbType1 == "Temperature" |
lit$DisturbType1 == "ENSO" |
lit$DisturbType1 == ">2 stressors" |
lit$DisturbType1 == "Sea level rise/hydrodymic change"
, ])
# keep only climatic disturbances
litSub1 <- litSub %>% filter(DisturbType1 == "Storms" |
DisturbType1 == "Temperature" |
DisturbType1 == "ENSO" |
DisturbType1 == ">2 stressors" |
DisturbType1 == "Sea level rise/hydrodymic change")
unique(litSub$DisturbType2)
litSub2 <- litSub %>% filter(DisturbType2 == "Storms" |
DisturbType2 == "Temperature" |
DisturbType2 == "ENSO" |
DisturbType2 == ">2 stressors" |
DisturbType2 == "Sea level rise/hydrodymic change")
head(litSub)
head(dat)
unique(dat$Paper)
# create new ecosystem column (with easier names)
ecoList <- unique(dat$EcosystemType)
ecoList
str(ecoList)
levels(ecoList)
ecoList2 <- c("Algal forests", "Coral reefs", "Mangroves", "Oyster reefs",
"Salt marshes", "Seagrasses")
dat$ecosystemNew <- mapvalues(dat$EcosystemType, from = ecoList, to = ecoList2)
# select relevant columns and rename
dat2 <- dat %>% select(Paper, ecosystemNew, ResilienceOutcome, ResilienceResponse,
DisturbType1, DisturbType2, PaperType) %>%
rename(ecosystem = ecosystemNew)
dat2 <- droplevels(dat2)
# This is the frequency of all papers
dat2 %>% group_by(ecosystem) %>% summarise(freq = n())
### Need to get relevant papers
# Remove rows where the paper could not be found
unique(dat2$PaperType)
dat2 <- dat2 %>% filter(PaperType != "can't find paper")
# Remove rows where the paper was not relevant to resilience
unique(dat2$PaperType)
dat3 <- dat2 %>% filter(PaperType != "NotRelevant")
dim(dat3) # 90 rows, keeping restoration
# Remove rows where paper had no ResilienceResponse group (e.g., habitat forming species)
summary(dat3$ResilienceResponse)
dat3 %>% filter(ResilienceResponse == "" ) # this paper does not appear relevant
dat4 <- dat3 %>% filter(ResilienceResponse != "" )
dat4 <- droplevels(dat4)
unique(dat4$PaperType)
unique(dat4$DisturbType1)
#################################################
# rename
litOrig <- dat2
litFull <- dat4
#################################################
### Now include only habitat forming species AND whole community
# and climatic disturbances
unique(litFull$ResilienceResponse)
litSub <- litFull %>% filter(ResilienceResponse == "HabitatFormingSpp" |
ResilienceResponse == "WholeCommunity")
litSub <- droplevels(litSub)
unique(litSub$DisturbType1)
unique(litSub$DisturbType2)
unique(litSub$ResilienceOutcome)
View(litSub)
# For disturbType1
# keep only climatic disturbances
litSub1 <- litSub %>% filter(DisturbType1 == "Storms" |
DisturbType1 == "Temperature" |
DisturbType1 == "ENSO" |
DisturbType1 == ">2 stressors" |
DisturbType1 == "Sea level rise/hydrodymic change")
# For disturbType2
# keep only climatic disturbances
litSub2 <- litSub %>% filter(DisturbType2 == "Storms" |
DisturbType2 == "Temperature" |
DisturbType2 == "ENSO" |
DisturbType2 == ">2 stressors" |
DisturbType2 == "Sea level rise/hydrodymic change")
head(litSub)
full_join(litSub1, litSub2)
litSub3 <- full_join(litSub1, litSub2)
head(litSub3)
View(litSub3)
litSub3 <- full_join(litSub1, litSub2) %>% distinct()
head(litSub3)
litSub <- litSub3
### Now include only habitat forming species AND whole community
# and climatic disturbances
unique(litFull$ResilienceResponse)
litSub <- litFull %>% filter(ResilienceResponse == "HabitatFormingSpp" |
ResilienceResponse == "WholeCommunity")
litSub <- droplevels(litSub)
unique(litSub$DisturbType1)
unique(litSub$DisturbType2)
unique(litSub$ResilienceOutcome)
View(litSub3)
