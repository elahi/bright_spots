panelA
panelA <- ggplot(subDF,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "A") + ULClabel +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subDF,
label = rev(subDFn), size = 3) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1, y = 0.8, size = 3)	+
theme(legend.position = "none")
panelA
subsetPapers <- litData2[litData2$Dataset == "subset", ]
fullPapers <- litData2[litData2$Dataset == "full", ]
subsetN <- litData2[litData2$Dataset == "subset", ]$N
fullN <- litData2[litData2$Dataset == "full", ]$N
panelB <- ggplot(subsetPapers,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
labs(title = "B") + ULClabel +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subsetPapers,
label = rev(subsetN), size = 3) +
labs(title = "B") + ULClabel +
geom_text(label = "Expert examples", x = 1, y = 0.8, size = 3)	+
theme(legend.position = "none")
panelB
panelB
# save as 7 x 3.5 pdf
pdf("./figs/BS_Fig3.pdf", 7, 3.5)
multiplot(panelA, panelB, cols = 2)
dev.off()
multiplot(panelA, panelB, cols = 2)
panelA <- ggplot(subDF,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
# labs(title = "A") + ULClabel +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subDF,
label = rev(subDFn), size = 3) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1, y = 0.8, size = 3)	+
theme(legend.position = "none")
panelA
panelB <- ggplot(subsetPapers,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subsetPapers,
label = rev(subsetN), size = 3) +
labs(title = "B") + ULClabel +
geom_text(label = "Literature\nexamples", x = 2, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelB
panelA <- ggplot(subDF,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subDF,
label = rev(subDFn), size = 3) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1, y = 0.8, size = 3)	+
theme(legend.position = "none") +
scale_x_continuous(limits = c(0, 1))
panelA
panelA <- ggplot(subDF,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
scale_y_continuous(limits = c(0, 1)) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subDF,
label = rev(subDFn), size = 3) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1, y = 0.8, size = 3)	+
theme(legend.position = "none")
panelA
panelA <- ggplot(subDF,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
scale_y_continuous(limits = c(0, 1)) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subDF,
label = rev(subDFn), size = 3) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert examples", x = 1, y = 0.9, size = 3)	+
theme(legend.position = "none")
panelA
multiplot(panelA, panelB, cols = 2)
###############################
# save as 7 x 3.5 pdf
pdf("./figs/BS_Fig3.pdf", 7, 3.5)
multiplot(panelA, panelB, cols = 2)
dev.off()
panelA <- ggplot(subDF,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
scale_y_continuous(limits = c(0, 1)) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subDF,
label = rev(subDFn), size = 3) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert\nexamples", x = 1, y = 0.9, size = 3)	+
theme(legend.position = "none")
panelA
multiplot(panelA, panelB, cols = 2)
################################
################################
# EXPERT PAPERS
################################
################################
# load source data
source("./R/process_expert_papers.R")
#################################################
# Get proportions for litSub (only habitat formers, whole comm, climatic dist)
summary(litSub)
totalN <- ddply(litSub, .(ecosystem), summarise,
totalN = length(ecosystem), .drop = FALSE)
totalN
litSub2 <- litSub[litSub$ResilienceOutcome != "No", ]
litSub2
totalYes <- ddply(litSub2, .(ecosystem), summarise,
freqYes = length(ecosystem), .drop = FALSE)
summary(litSub2)
litData <- cbind(totalN, totalYes$freqYes)
colnames(litData)[3] <- "freqYes"
head(litData)
litData$dataset <- rep("subset", 6)
litData
#################################################
# Get proportions for litFull (98 papers)
summary(litFull)
totalNfull <- ddply(litFull, .(ecosystem), summarise,
totalN = length(ecosystem), .drop = FALSE)
totalNfull
levels(litFull$ResilienceOutcome)
litFull2 <- litFull[litFull$ResilienceOutcome == "Yes" |
litFull$ResilienceOutcome == "Context-Dependent", ]
dim(litFull2)
totalYesFull <- ddply(litFull2, .(ecosystem), summarise,
freqYesFull = length(ecosystem), .drop = FALSE)
summary(totalYesFull)
totalYesFull
litDataFull <- cbind(totalNfull, totalYesFull$freqYesFull)
litDataFull
colnames(litDataFull)[3] <- "freqYes"
litDataFull$dataset <- rep("full", 6)
#################################################
# Combine litData and litFull
litData
litDataFull
litData2 <- rbind(litData, litDataFull)
litData2$prop <- with(litData2, freqYes/totalN)
colnames(litData2) <- c("Ecosystem", "N", "Yes", "Dataset", "Proportion")
litData2
unique(litData2$Ecosystem)
unique(litData2$Dataset)
litData2$Ecosystem <- with(litData2, factor(Ecosystem,
levels = levels(Ecosystem)[order(levels(Ecosystem), decreasing = TRUE)]))
litData2
###############################
# MULTIPANEL PLOT
subsetPapers <- litData2[litData2$Dataset == "subset", ]
fullPapers <- litData2[litData2$Dataset == "full", ]
subsetN <- litData2[litData2$Dataset == "subset", ]$N
fullN <- litData2[litData2$Dataset == "full", ]$N
ULClabel <- theme(plot.title = element_text(hjust = -0.1, vjust = 0, size = rel(1.5)))
panelB <- ggplot(subsetPapers,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subsetPapers,
label = rev(subsetN), size = 3) +
labs(title = "B") + ULClabel +
geom_text(label = "Literature\nexamples", x = 1, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelB
###############################
# save as 7 x 3.5 pdf
pdf("./figs/BS_Fig3.pdf", 7, 3.5)
multiplot(panelA, panelB, cols = 2)
dev.off()
ULClabel <- theme(plot.title =
element_text(hjust = -0.2, vjust = 0, size = rel(1.5)))
panelB <- ggplot(subsetPapers,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subsetPapers,
label = rev(subsetN), size = 3) +
labs(title = "B") + ULClabel +
geom_text(label = "Literature\nexamples", x = 1, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelB
# save as 7 x 3.5 pdf
pdf("./figs/BS_Fig3.pdf", 7, 3.5)
multiplot(panelA, panelB, cols = 2)
dev.off()
ULClabel <- theme(plot.title = element_text(hjust = -0.2,
vjust = 0, size = rel(1.5)))
subDF <- examplesDF[examplesDF$data == "subset", ]
fullDF <- examplesDF[examplesDF$data == "full", ]
subDFn <- examplesDF[examplesDF$data == "subset", ]$N
fullDFn <- examplesDF[examplesDF$data == "full", ]$N
panelA <- ggplot(subDF,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
scale_y_continuous(limits = c(0, 1)) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subDF,
label = rev(subDFn), size = 3) +
labs(title = "A") + ULClabel +
geom_text(label = "Expert\nexamples", x = 1, y = 0.9, size = 3)	+
theme(legend.position = "none")
panelA
multiplot(panelA, panelB, cols = 2)
################################
################################
# EXPERT PAPERS
################################
################################
# load source data
source("./R/process_expert_papers.R")
#################################################
# Get proportions for litSub (only habitat formers, whole comm, climatic dist)
summary(litSub)
totalN <- ddply(litSub, .(ecosystem), summarise,
totalN = length(ecosystem), .drop = FALSE)
totalN
litSub2 <- litSub[litSub$ResilienceOutcome != "No", ]
litSub2
totalYes <- ddply(litSub2, .(ecosystem), summarise,
freqYes = length(ecosystem), .drop = FALSE)
summary(litSub2)
litData <- cbind(totalN, totalYes$freqYes)
colnames(litData)[3] <- "freqYes"
head(litData)
litData$dataset <- rep("subset", 6)
litData
#################################################
# Get proportions for litFull (98 papers)
summary(litFull)
totalNfull <- ddply(litFull, .(ecosystem), summarise,
totalN = length(ecosystem), .drop = FALSE)
totalNfull
levels(litFull$ResilienceOutcome)
litFull2 <- litFull[litFull$ResilienceOutcome == "Yes" |
litFull$ResilienceOutcome == "Context-Dependent", ]
dim(litFull2)
totalYesFull <- ddply(litFull2, .(ecosystem), summarise,
freqYesFull = length(ecosystem), .drop = FALSE)
summary(totalYesFull)
totalYesFull
litDataFull <- cbind(totalNfull, totalYesFull$freqYesFull)
litDataFull
colnames(litDataFull)[3] <- "freqYes"
litDataFull$dataset <- rep("full", 6)
#################################################
# Combine litData and litFull
litData
litDataFull
litData2 <- rbind(litData, litDataFull)
litData2$prop <- with(litData2, freqYes/totalN)
colnames(litData2) <- c("Ecosystem", "N", "Yes", "Dataset", "Proportion")
litData2
unique(litData2$Ecosystem)
unique(litData2$Dataset)
litData2$Ecosystem <- with(litData2, factor(Ecosystem,
levels = levels(Ecosystem)[order(levels(Ecosystem), decreasing = TRUE)]))
litData2
###############################
# MULTIPANEL PLOT
subsetPapers <- litData2[litData2$Dataset == "subset", ]
fullPapers <- litData2[litData2$Dataset == "full", ]
subsetN <- litData2[litData2$Dataset == "subset", ]$N
fullN <- litData2[litData2$Dataset == "full", ]$N
ULClabel <- theme(plot.title =
element_text(hjust = -0.2, vjust = 0, size = rel(1.5)))
panelB <- ggplot(subsetPapers,aes(x = Ecosystem, y = Proportion)) +
theme_classic(base_size = 12) + xlab("") + ylab("Proportion") +
geom_bar(fill = "darkgray", color = "black",
stat = "identity", width = 0.8) +
coord_flip() +
guides(fill = guide_legend(reverse = TRUE)) +
geom_text(aes(x = 1:6, y = 0.05), data = subsetPapers,
label = rev(subsetN), size = 3) +
labs(title = "B") + ULClabel +
geom_text(label = "Literature\nexamples", x = 1, y = 0.8, size = 3) 	+
theme(legend.position = "none")
panelB
###############################
# save as 7 x 3.5 pdf
pdf("./figs/BS_Fig3.pdf", 7, 3.5)
multiplot(panelA, panelB, cols = 2)
dev.off()
# load packages
library(plyr)
library(dplyr)
library(reshape2)
library(ggplot2)
# load source functions
source("./R/summarizeData_150204.R")
source("./R/multiplotF.R")
source("./R/process_expert_survey.R")
# filter studies that did not show resilience; select and rename relevant columns
unique(dat$Resilience)
dat2 <- filter(dat, Resilience == "Yes") %>%
select(ecosystem, Length_StrongResilience, ResilienceFactorWriteIn1,
ResilienceFactorWriteIn2, Disturbance_StrongReslience) %>%
rename(factor1 = ResilienceFactorWriteIn1,
factor2 = ResilienceFactorWriteIn2, disturbLength1 = Length_StrongResilience)
summary(dat2)
# remove studies without a factor1
dat3 <- dat2 %>% filter(factor1 != "")
# create new factor column
factorList <- unique(dat3$factor1)
factorList
factorList2 <- c("Other", "Recruitment or connectivity",
"Remaining biogenic habitat", "Functional diversity",
"Physical setting", "Remoteness",
"Species interactions")
factorList2
factorNew <- mapvalues(dat3$factor1, from = factorList, to = factorList2)
dat3 <- cbind(factorNew, dat3)
names(dat3)
dat4 <- dat3 %>% select(factorNew, ecosystem, factor2, Disturbance_StrongReslience) %>%
rename(factor1 = factorNew)
head(dat4)
# I need to get factor 1 and factor 2 in the same column
factorList <- unique(dat4$factor2)
factorList
factorList2 <- c("NA", "Species interactions",
"Remoteness","Recruitment or connectivity",
"Management", "Remaining biogenic habitat",
"Functional diversity")
factorList2
factor2New <- mapvalues(dat4$factor2, from = factorList, to = factorList2)
dat5 <- cbind(factor2New, dat4)
datF1 <- data.frame(ecosystem = dat5$ecosystem, factorAll = dat5$factor1,
disturbance = dat5$Disturbance_StrongReslience)
datF2 <- data.frame(ecosystem = dat5$ecosystem, factorAll = dat5$factor2New,
disturbance = dat5$Disturbance_StrongReslience)
head(datF1)
datL <- droplevels(rbind(datF1, datF2[datF2$factorAll != "NA", ]))
datL
source("./R/process_expert_survey.R")
unique(dat$Resilience)
dat2 <- filter(dat, Resilience == "Yes") %>%
select(ecosystem, Length_StrongResilience, ResilienceFactorWriteIn1,
ResilienceFactorWriteIn2, Disturbance_StrongReslience) %>%
rename(factor1 = ResilienceFactorWriteIn1,
factor2 = ResilienceFactorWriteIn2, disturbLength1 = Length_StrongResilience)
summary(dat2)
# remove studies without a factor1
dat3 <- dat2 %>% filter(factor1 != "")
# create new factor column
factorList <- unique(dat3$factor1)
factorList
factorList2 <- c("Other", "Recruitment or connectivity",
"Remaining biogenic habitat", "Functional diversity",
"Physical setting", "Remoteness",
"Species interactions")
factorList2
factorNew <- mapvalues(dat3$factor1, from = factorList, to = factorList2)
dat3 <- cbind(factorNew, dat3)
names(dat3)
dat4 <- dat3 %>% select(factorNew, ecosystem, factor2, Disturbance_StrongReslience) %>%
rename(factor1 = factorNew)
head(dat4)
# I need to get factor 1 and factor 2 in the same column
factorList <- unique(dat4$factor2)
factorList
factorList2 <- c("NA", "Species interactions",
"Remoteness","Recruitment or connectivity",
"Management", "Remaining biogenic habitat",
"Functional diversity")
factorList2
factor2New <- mapvalues(dat4$factor2, from = factorList, to = factorList2)
dat5 <- cbind(factor2New, dat4)
datF1 <- data.frame(ecosystem = dat5$ecosystem, factorAll = dat5$factor1,
disturbance = dat5$Disturbance_StrongReslience)
datF2 <- data.frame(ecosystem = dat5$ecosystem, factorAll = dat5$factor2New,
disturbance = dat5$Disturbance_StrongReslience)
head(datF1)
factorList <- unique(dat4$factor2)
head(dat4)
dat4 <- dat3 %>% select(factorNew, ecosystem, factor2, Disturbance_StrongReslience) %>%
rename(factor1 = factorNew)
factorNew <- mapvalues(dat3$factor1, from = factorList, to = factorList2)
dat3 <- dat2 %>% filter(factor1 != "")
# create new factor column
factorList <- unique(dat3$factor1)
factorList
###
rm(list=ls(all=TRUE)) # removes all previous material from R's memory
# load packages
library(plyr)
library(dplyr)
library(reshape2)
library(ggplot2)
# load source functions
source("./R/summarizeData_150204.R")
source("./R/multiplotF.R")
################################
################################
# EXPERT EXAMPLES
################################
################################
# load source data
source("./R/process_expert_survey.R")
###############
# Decision tree
# Factors promoting resilience - expert examples
# Start with 97 rows (respondents)
# Remove 30 respondents who did not observe resilience; 67 rows
# Remove 3 respondents who did not give a factor1 for resilience; 64 rows
# Combined two listed factors; 81 rows
# Removed non-climate disturbances; 71 rows
# filter studies that did not show resilience; select and rename relevant columns
unique(dat$Resilience)
dat2 <- filter(dat, Resilience == "Yes") %>%
select(ecosystem, Length_StrongResilience, ResilienceFactorWriteIn1,
ResilienceFactorWriteIn2, Disturbance_StrongReslience) %>%
rename(factor1 = ResilienceFactorWriteIn1,
factor2 = ResilienceFactorWriteIn2, disturbLength1 = Length_StrongResilience)
summary(dat2)
summary(dat2)$factor1
summary(dat2$factor1)
summary(dat2$factor2)
summary(dat2$factor1)
grep(dat2$factor1)
grep("Adquate", dat2$factor1)
table(dat2$factor1)
summary(dat2$factor1)
dat2 <- droplevels(dat2)
summary(dat2$factor1)
summary(dat2$factor2)
factorList <- unique(dat2$factor1)
factorList
summary(dat2$factor1)
table(dat2$factor1)
View(dat2)
ifelse(dat2$factor1 == "" & dat2$factor2 != "", "bad", "good")
dat2[,3:4]
summary(dat2$factor2)
summary(dat2$factor1)
summary(dat2$factor2)
dat2$factor1 == ""
dat2$factor1 != ""
dat2$factor1 == "" & dat2$factor1 != ""
dat2[,3:4]
with(dat2[64], factor1 == "")
with(dat2[64,], factor1 == "")
with(dat2[64,], factor1 != "")
with(dat2[64,], factor2 != "")
with(dat2[64,], factor1 == "" & factor2 != "")
ifelse(dat2$factor1 == "" & dat2$factor2 != "", "bad", "good")
suspect <- ifelse(dat2$factor1 == "" & dat2$factor2 != "", "bad", "good")
dat2$suspect <- ifelse(dat2$factor1 == "" & dat2$factor2 != "", "bad", "good")
factor2 <- with(dat2, ifelse(suspect == "good", factor1, factor2))
factor2
factor1new <- with(dat2, ifelse(suspect == "good", factor1, factor2))
dat2$factor1
c(dat2$factor1, factor1new)
cbind(dat2$factor1, factor1new)
dat2$factor1new <- with(dat2, ifelse(suspect == "good",
as.string(factor1), as.string(factor2))
as.string(factor1), as.string(factor2)))
dat2$factor1new <- with(dat2, ifelse(suspect == "good",
as.string(factor1), as.string(factor2)))
dat2$factor1new <- with(dat2, ifelse(suspect == "good",
as.character(factor1), as.character(factor2)))
View(dat2)
dat2$factor1 <- with(dat2, ifelse(suspect == "good",
as.character(factor1), as.character(factor2)))
dat3 <- dat2 %>% filter(factor1 != "")
factorList <- unique(dat2$factor1)
factorList
dat3 <- dat2 %>% filter(factor1 != "") %>% droplevels()
# create new factor column
factorList <- unique(dat2$factor1)
factorList
dat3 <- dat2 %>% filter(factor1 != "")
unique(dat3$factor1)
factorList <- unique(dat3$factor1)
factorList
summary(dat2$factor1)
summary(dat$ResilienceFactorWriteIn1)
unique(dat$ResilienceFactorWriteIn1)
unique(dat$ResilienceFactorWriteIn1)
unique(dat$ResilienceFactorWriteIn2)
